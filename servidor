#!/usr/bin/env python3
import asyncio
from tcp import Servidor, Conexao
import base64, os
import re
from typing import List, Dict

nicknamesPerConnection = dict()
canais: Dict[str, List[Conexao]] = dict()    # Cada nome de canal está associado a uma lista de conexões
nickname_dict: Dict[Conexao, str] = dict()   # Cada conexão está associada a um nick apenas

def getKey(dct,value):
    for key in dct:
        temp = dct[key]
        for i in temp:
            if i == value:
                return key

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def dados_recebidos(conexao, dados):

    if dados == b'':
        nicknamesPerConnection.clear()
        return sair(conexao)

    dados = conexao.dados_residuais + dados

    linhas = dados.split(b'\r\n')

    if not dados.endswith(b'\n'):
        conexao.dados_residuais = linhas[-1]
        linhas = linhas[:-1]
    else:
        conexao.dados_residuais = b''

    '''    
    palavras = (conexao.dados_residuais + dados).split(b'\r\n')

    if not dados.endswith(b'\r\n'):
        conexao.dados_residuais = palavras[-1]
        palavras = palavras[:-1]

    for palavra in palavras:.lower()
        if palavra == b'':
            continue

        termo = palavra.split()
    '''
    for linha in linhas:
        if linha == b'':
            continue
        termo = linha.split(b' ')

        if termo[0] == b'PING':
            conexao.s.sendall(b':server PONG server :%s\r\n' % termo[1])

        if termo[0] == b'NICK':         
            flagNicknameAlredyExists = 0

            # Validando o nick
            if validar_nome(termo[1]) == False:
                conexao.s.sendall(b':server 432 * %s :Erroneous nickname\r\n' % termo[1])
            else:
                # Verificando se o nick existe
                for nick in nickname_dict.values():
                    if termo[1].lower() == nick.lower():
                        flagNicknameAlredyExists = 1
                        break
                # Se não, adiciona o nick a conexão (primeira vez setando o nick) ou troca o nick caso a conexão já estiver o dicionário
                if (flagNicknameAlredyExists == 0):
                    flag_conexao_existente = 0
                    if conexao in nickname_dict:
                        nick_antigo = conexao.get_nick()
                        flag_conexao_existente = 1
                    conexao.set_nick(termo[1].decode('ascii'))              # setta o nick atual
                    nickname_dict[conexao] = termo[1]

                    if flag_conexao_existente:
                        conexao.s.sendall(b':%s NICK %s\r\n' % (nick_antigo.encode(), termo[1].lower()))
                    else:
                        conexao.s.sendall(b':server 001 %s :Welcome\r\n' % termo[1].lower())
                        conexao.s.sendall(b':server 422 %s :MOTD File is missing\r\n' % termo[1].lower())
                    print(list(nickname_dict.values()))
                # Caso contrário
                else:
                    if conexao not in nickname_dict:
                        conexao.s.sendall(b':server 433 * %s :Nickname is already in use\r\n' % termo[1])       
                    else:
                        conexao.s.sendall(b':server 433 %s %s :Nickname is already in use\r\n' % (conexao.get_nick().encode(), termo[1]))   

        """ PASSO 5 """                 
        if termo[0] == b'PRIVMSG':
            destinatario = termo[1].lower()
            mensagem = termo[2][1:]

            # Mensagem individual
            if destinatario[0] != 35:
                conexao_certa: Conexao = None
                for con in nickname_dict:
                    if nickname_dict[con] == destinatario:
                        conexao_certa = con
                
                if conexao_certa:
                    conexao_certa.enviar(b':%s PRIVMSG %s :%s\r\n' % (conexao.get_nick().encode(), destinatario, mensagem))
            
            # Mensagem para canal
            else:
                canal = destinatario[1:]
                for con in canais[canal]:
                    conexao_certa.enviar(b':%s PRIVMSG %s :%s\r\n' % (conexao.get_nick().encode(), con.get_nick(), mensagem))

        """ PASSO 6 """
        if termo[0] == b'JOIN':
            """ Verifica se o primeiro caracter do nome do canal é "#" e se o restante do nome é valido
            """
            canal = termo[1].lower().decode("ascii")
            nome_canal = termo[1][1:]

            if (canal[0] != '#') or not (validar_nome(nome_canal)):
                conexao.s.sendall(b':server 403 %s :No such channel\r\n' % nome_canal)
            else:
                if canal not in canais:
                    canais[canal] = [conexao]
                else:
                    canais[canal].append(conexao)

                for con in canais[canal]:
                    con.enviar(b':%s JOIN :%s\r\n' % (conexao.get_nick().encode(), nome_canal))

                string_builder = ""
                for i in range(len(canais[canal])):
                    if i == 0:
                        string_builder = b'%s ' % canais[canal][i].get_nick().encode()
                    elif i == len(canais[canal][i]) - 1:
                        string_builder += b'%s' % canais[canal][i].get_nick().encode()
                    else:
                        string_builder += b'%s ' % canais[canal][i].get_nick().encode()

                full_message = b':server 353 %s = %s :%s\r\n' % (conexao.get_nick().encode(), canal, string_builder)

                if len(full_message) > 512:
                    while len(full_message) > 510:
                        temp = string_builder
                        temp.split(" ")
                        full_message =  b':server 353 %s = %s :%s %s %s\r\n' % conexao.get_nick().encode(), canal, temp[0], temp[1], temp[2]
                        conexao.s.sendall(b'%s\r\n' % full_message)
                        string_builder = members_builder(temp[2:])
                        full_message = b':server 353 %s = %s :%s\r\n' % conexao.get_nick().encode(), canal, string_builder
                conexao.s.sendall(b'%s' % full_message)
        '''
        if usuario:
            if usuario == conexao:
                if termo[1] in usuarios.keys():
                    print("TESTE")
                    conexao.s.sendall(b':server 433 %s %s :Nickname is already in use\r\n' % (termo[1], termo[1].upper()))
                elif termo[1] not in usuarios.keys():
                    conexao.s.sendall(b':server 001 %s :Welcome\r\n' % termo[1])
                    print(usuarios)
                    conexao.s.sendall(b':server 422 %s :MOTD File is missing\r\n' % termo[1])
            else:
                if termo[1] == termo[1].upper():
                    conexao.s.sendall(b':server 433 %s %s :Nickname is already in use\r\n' % (termo[1], termo[1].upper()))
                else:
                    conexao.s.sendall(b':server 433 * %s :Nickname is already in use\r\n' % termo[1])
        else:
            if termo[1].upper() in usuarios.keys():
                conexao.s.sendall(b':server 433 * %s :Nickname is already in use\r\n' % termo[1])
            else:
                if validar_nome(termo[1]):
                    if termo[1] in usuarios.keys():
                        
                        conexao.s.sendall(b':server 433 * %s :Nickname is already in use\r\n' % termo[1])
                    else:
                        pass

                    usuarios[termo[1].upper()] = conexao

                    print(usuarios)
                            
                    conexao.s.sendall(b':server 001 %s :Welcome\r\n' % termo[1])
                    conexao.s.sendall(b':server 422 %s :MOTD File is missing\r\n' % termo[1])
                else:
                    conexao.s.sendall(b':server 432 * %s :Erroneous nickname\r\n' % termo[1])
'''
    # print(conexao, dados)

def members_builder(members: List) -> str:
    string_builder = ""
    for i in range(len(members)):
        if i == len(members) - 1:
            string_builder += b'%s' % members[i]
        else:
            string_builder += b'%s ' % members[i]

    return string_builder


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')

    conexao.dados_residuais = b''
    conexao.nicknameList = list()
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)

asyncio.get_event_loop().run_forever()
 